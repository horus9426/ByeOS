/*
	Copyright (C) 2019 Zachary Yosick

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef KEYBOARD_H
#define KEYBOARD_H


#define MAX_SCANCODE 0xA6

#include <libk.h>
#include "kbdint.h"

static const char scancodes[] = 
{
	0, //0x00
	0, //F9 0x01
	0, //0x02
	0, //F5 0x03
	0, //F3 0x04
	0, //F1 0x05
	0, //F2 0x06
	0, //F12 0x07
	0, //0x08
	0, //F10 0x09
	0, //F8 0x0A
	0, //F6 0x0B
	0, //F4 0x0C
	'\t', //0x0D
	'`', //0x0E
	0, //0x0F
	0, //0x10
	0, //LALT 0x11
	0, //LSHIFT 0x12
	0, //0x13
	0, //LCTRL 0x14
	'q', //0x15
	'1', //0x16
	0, //0x17
	0, //0x18
	0, //0x19
	'z', //0x1A
	's', //0x1B
	'a', //0x1C
	'w', //0x1D
	'2', //0x1E
	0, //0x1F
	0, //0x20
	'c', //0x21
	'x', //0x22
	'd', //0x23
	'e', //0x24
	'4', //0x25
	'3', //0x26
	0, //0x27
	0, //0x28
	' ', //0x29
	'v', //0x2A
	'f', //0x2B
	't', //0x2C
	'r', //0x2D
	'5', //0x2E
	0, //0x2F
	0, //0x30
	'n', //0x31
	'b', //0x32
	'h', //0x33
	'g', //0x34
	'y', //0x35
	'6', //0x36
	0, //0x37
	0, //0x38
	0, //0x39
	'm', //0x3A
	'j', //0x3B
	'u', //0x3C
	'7', //0x3D
	'8', //0x3E
	0, //0x3F
	0, //0x40
	',', //0x41
	'k', //0x42
	'i', //0x43
	'o', //0x44
	'0', //0x45
	'9', //0x46
	0, //0x47
	0, //0x48
	'.', //0x49
	'/', //0x4A
	'l', //0x4B
	';', //0x4C
	'p', //0x4D
	'-', //0x4E
	0, //0x4F
	0, //0x50
	0, //0x51
	'\'', //0x52
	0, //0x53
	'[', //0x54
	'=', //0x55
	0, //0x56
	0, //0x57
	0, //CAPS LOCK 0x58
	0, //RSHIFT 0x59
	'\n', //0x5A
	']', //0x5B
	0, //0x5C
	'\\', //0x5D
	0, //0x5E
	0, //0x5F
	0, //0x60
	0, //0x61
	0, //0x62
	0, //0x63
	0, //0x64
	0, //0x65
	'\b', //0x66
	0, //0x67
	0, //0x68
	0, //KEYPAD 1 0x69
	0, //0x6A
	0, //KEYPAD 4 0x6B
	0, //KEYPAD 7 0x6C
	0, //0x6D
	0, //0x6E
	0, //0x6F
	0, //KEYPAD 0 0x70
	0, //KEYPAD . 0x71
	0, //KEYPAD 2 0x72
	0, //KEYPAD 5 0x73
	0, //KEYPAD 6 0x74
	0, //KEYPAD 8 0x75
	0, //ESCAPE 0x76
	0, //NUMLOCK 0x77
	0, //F11 0x78
	0, //KEYPAD + 0x79
	0, //KEYPAD 3 0x7A
	0, //KEYPAD - 0x7B
	0, //KEYPAD * 0x7C
	0, //KEYPAD 9 0x7D
	0, //SCRL LCK 0x7E
	0, //0x7F
	0, //0x80
	0, //0x81
	0, //0x82
	0, //F7 0x83
	0, //0x84
	0, //0x85
	0, //0x86
	0, //0x87
	0, //0x88
	0, //0x89
	0, //0x8A
	0, //0x8B
	0, //0x8C
	0, //0x8D
	0, //0x8E
	0, //0x8F
	0, //0x90
	0, //0x91
	0, //0x92
	0, //0x93
	0, //0x94
	0, //0x95
	0, //0x96
	0, //0x97
	0, //0x98
	0, //0x99
	0, //0x9A
	0, //0x9B
	0, //0x9C
	0, //0x9D
	0, //0x9E
	0, //0x9F
	0, //0xA0
	0, //0xA1
	0, //0xA2
	0, //0xA3
	0, //0xA4
	0, //0xA5
	0, //0xA6
	0, //0xA7
	0, //0xA8
	0, //0xA9
	0, //0xAA
	0, //0xAB
	0, //0xAC
	0, //0xAD
	0, //0xAE
	0, //0xAF
	0, //0xB0
	0, //0xB1
	0, //0xB2
	0, //0xB3
	0, //0xB4
	0, //0xB5
	0, //0xB6
	0, //0xB7
	0, //0xB8
	0, //0xB9
	0, //0xBA
	0, //0xBB
	0, //0xBC
	0, //0xBD
	0, //0xBE
	0, //0xBF
	0, //0xC0
	0, //0xC1
	0, //0xC2
	0, //0xC3
	0, //0xC4
	0, //0xC5
	0, //0xC6
	0, //0xC7
	0, //0xC8
	0, //0xC9
	0, //0xCA
	0, //0xCB
	0, //0xCC
	0, //0xCD
	0, //0xCE
	0, //0xCF
	0, //0xD0
	0, //0xD1
	0, //0xD2
	0, //0xD3
	0, //0xD4
	0, //0xD5
	0, //0xD6
	0, //0xD7
	0, //0xD8
	0, //0xD9
	0, //0xDA
	0, //0xDB
	0, //0xDC
	0, //0xDD
	0, //0xDE
	0, //0xDF
	0, //SPECIAL 0xE0
	0, //0xE1
	0, //0xE2
	0, //0xE3
	0, //0xE4
	0, //0xE5
	0, //0xE6
	0, //0xE7
	0, //0xE8
	0, //0xE9
	0, //0xEA
	0, //0xEB
	0, //0xEC
	0, //0xED
	0, //0xEE
	0, //0xEF
	0, //0xF0
	0, //0xF1
	0, //0xF2
	0, //0xF3
	0, //0xF4
	0, //0xF5
	0, //0xF6
	0, //0xF7
	0, //0xF8
	0, //0xF9
	0, //0xFA
	0, //0xFB
	0, //0xFC
	0, //0xFD
	0, //0xFE
	0, //0xFF
};

#define BUFFER_SIZE 256

volatile enum 
{
	WAITING,
	CTRL_CHAR_RECEIVED,
	BREAK_CODE_RECEIVED,
	NEWLINE_RECEIVED
	
} state;

void init_keyboard();
char* read_line();

#endif